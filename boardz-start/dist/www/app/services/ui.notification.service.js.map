{"version":3,"sources":["services/ui.notification.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAQA;gBAGI,+BAAoB,oBAAyC;oBAAzC,yBAAoB,GAApB,oBAAoB,CAAqB;oBAFrD,yBAAoB,GAAG,EAAE,CAAC;oBAG9B,IAAI,CAAC,oBAAoB,CAAC,mCAAgB,CAAC,WAAW,CAAC,GAAG,MAAM,CAAC;oBACjE,IAAI,CAAC,oBAAoB,CAAC,mCAAgB,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;oBAC5D,IAAI,CAAC,oBAAoB,CAAC,mCAAgB,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC;oBAC/D,IAAI,CAAC,oBAAoB,CAAC,mCAAgB,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;gBACpE,CAAC;gBAEM,wDAAwB,GAA/B;oBAAA,iBAIC;oBAHG,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,SAAS,CAAC,UAAC,YAA0B;wBACzE,KAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;oBAC1C,CAAC,CAAC,CAAC;gBACP,CAAC;gBAEO,kDAAkB,GAA1B,UAA2B,YAA0B;oBACjD,IAAM,IAAI,GAAG,IAAI,CAAC,6BAA6B,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBAEnE,IAAM,QAAQ,GAAG;wBACb,OAAO,EAAE,YAAY;wBACrB,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBAC7C,IAAI,EAAE,YAAY,CAAC,OAAO;wBAC1B,IAAI,EAAE,IAAI;wBACV,QAAQ,EAAE,eAAe;wBACzB,WAAW,EAAE,EAAE;wBACf,KAAK,EAAE,MAAM;qBAChB,CAAC;oBAEF,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAC1B,CAAC;gBAEO,6DAA6B,GAArC,UAAsC,IAAsB;oBACxD,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC;gBACvD,CAAC;gBAnCL;oBAAC,iBAAU,EAAE;;yCAAA;gBAoCb,4BAAC;YAAD,CAnCA,AAmCC,IAAA;YAnCD,yDAmCC,CAAA","file":"services/ui.notification.service.js","sourcesContent":["import {Injectable} from 'angular2/core';\nimport {NotificationService} from './notification.service';\nimport {Notification} from '../models/notification';\nimport {NotificationType} from '../models/notificationtype';\n\ndeclare var PNotify;\n\n@Injectable()\nexport class UiNotificationService {\n    private _notificationTypeMap = {};\n\n    constructor(private _notificationService: NotificationService) {\n        this._notificationTypeMap[NotificationType.Information] = 'info';\n        this._notificationTypeMap[NotificationType.Error] = 'error';\n        this._notificationTypeMap[NotificationType.Warning] = 'notice';\n        this._notificationTypeMap[NotificationType.Success] = 'success';\n    }\n\n    public subscribeToNotifications(): void {\n        this._notificationService.notifications.subscribe((notification: Notification) => {\n            this.showUiNotification(notification);\n        });\n    }\n\n    private showUiNotification(notification: Notification): void {\n        const type = this.notificationTypeToPNotifyType(notification.type);\n\n        const settings = {\n            styling: 'bootstrap3',\n            title: type[0].toUpperCase() + type.substr(1),\n            text: notification.message,\n            type: type,\n            addclass: 'stack-bar-top',\n            cornerclass: '',\n            width: '100%',\n        };\n\n        new PNotify(settings);\n    }\n\n    private notificationTypeToPNotifyType(type: NotificationType): string {\n        return this._notificationTypeMap[type] || 'notice';\n    }\n}\n"],"sourceRoot":"/source/"}