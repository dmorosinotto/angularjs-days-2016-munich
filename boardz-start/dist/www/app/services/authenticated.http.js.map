{"version":3,"sources":["services/authenticated.http.ts"],"names":[],"mappings":"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","file":"services/authenticated.http.js","sourcesContent":["import {Injectable} from 'angular2/core';\nimport {Http, RequestOptionsArgs, Response, Headers} from 'angular2/http';\nimport {Observable} from 'rxjs/Observable';\nimport {Configuration} from '../app-config';\nimport {TokenService} from './token.service';\n\n@Injectable()\nexport class AuthenticatedHttp {\n    constructor(private _http: Http, private _config: Configuration, private _tokenService: TokenService) {\n    }\n\n    private buildUrl(appendix: string): string{\n        return `${this._config.apiEndpoint}${appendix}`;\n    }\n\n    request(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        url = this.buildUrl(url);\n        options = this.prepareOptions(options);\n        return this._http.request(url, options);\n    }\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        url = this.buildUrl(url);\n        options = this.prepareOptions(options);\n        return this._http.get(url, options);\n    }\n\n    post(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\n        url = this.buildUrl(url);\n        options = this.prepareOptions(options);\n        return this._http.post(url, body, options);\n    }\n\n    put(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\n        url = this.buildUrl(url);\n        options = this.prepareOptions(options);\n        return this._http.put(url, body, options);\n    }\n\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        url = this.buildUrl(url);\n        options = this.prepareOptions(options);\n        return this._http.delete(url, options);\n    }\n\n    patch(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\n        url = this.buildUrl(url);\n        options = this.prepareOptions(options);\n        return this._http.patch(url, body, options);\n    }\n\n    head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        url = this.buildUrl(url);\n        options = this.prepareOptions(options);\n        return this._http.head(url, options);\n    }\n\n    protected prepareOptions(options: RequestOptionsArgs): RequestOptionsArgs {\n        var token = this._tokenService.token;\n\n        if (token) {\n            options = options ||{ };\n\n            if (!options.headers)\n                options.headers = new Headers();\n\n            options.headers.append('Authorization', 'Bearer ' + token);\n        }\n\n        return options;\n    }\n}\n"],"sourceRoot":"/source/"}