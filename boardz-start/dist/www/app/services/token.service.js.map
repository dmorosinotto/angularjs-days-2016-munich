{"version":3,"sources":["services/token.service.ts"],"names":[],"mappings":"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","file":"services/token.service.js","sourcesContent":["import {Injectable} from 'angular2/core';\nimport {Observable} from 'rxjs/Observable';\nimport {LogService} from './log.service';\n\nconst tokenKey: string = 'Authentication::Token';\nconst usernameKey: string = 'Authentication::Username';\nconst expiryKey: string = 'Authentication::TokenExpiration';\n\n@Injectable()\nexport class TokenService {\n    private _authenticated: boolean;\n\n    constructor(private _logService: LogService) {\n        var token = this.token;\n        if ((typeof token !== 'undefined') && (token !== null))\n            this._authenticated = true;\n    }\n\n    public get token(): string {\n        let token = localStorage.getItem(tokenKey);\n        this._logService.logVerbose('TokenService: Retrieved token: ' + token);\n\n        return token;\n    }\n\n    public set token(token: string) {\n        this._logService.logVerbose('TokenService: Setting token: ' + token);\n\n        if (token === null) {\n            localStorage.removeItem(tokenKey);\n            this.username = null;\n            this.tokenExpiry = null;\n            this._authenticated = false;\n        } else {\n            localStorage.setItem(tokenKey, token);\n            this._authenticated = true;\n        }\n    }\n\n    public get username(): string {\n        let username = localStorage.getItem(usernameKey);\n        this._logService.logVerbose('TokenService: Retrieved user name: ' + username);\n\n        return username;\n    }\n\n    public set username(username: string) {\n        this._logService.logVerbose('TokenService: Setting user name: ' + username);\n\n        if (username === null) {\n            localStorage.removeItem(usernameKey);\n        } else {\n            localStorage.setItem(usernameKey, username);\n        }\n    }\n\n    public get tokenExpiry(): Date {\n        let value = localStorage.getItem(expiryKey);\n        this._logService.logVerbose('TokenService: Retrieved token expiry: ' + value);\n\n        return (value !== null) ? new Date(value) : null;\n    }\n\n    public set tokenExpiry(expiryDate: Date) {\n        this._logService.logVerbose('TokenService: Setting token expiry: ' + expiryDate);\n\n        if (expiryDate === null) {\n            localStorage.removeItem(expiryKey);\n        } else {\n            localStorage.setItem(expiryKey, expiryDate.toISOString());\n        }\n    }\n\n    check(): Observable<boolean> {\n        return Observable.of(this._authenticated);\n    }\n}\n"],"sourceRoot":"/source/"}