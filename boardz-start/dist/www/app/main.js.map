{"version":3,"sources":["main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAwBA,qBAAc,EAAE,CAAC;YAEjB,mBAAS,CAAC,eAAS,EAAE;gBACjB,qBAAc;gBACd,yBAAgB;gBAChB,cAAO,CAAC,yBAAgB,EAAE,EAAE,QAAQ,EAAE,6BAAoB,EAAE,CAAC;gBAC7D,cAAO,CAAC,wBAAU,EAAE,EAAE,QAAQ,EAAE,wBAAU,EAAE,CAAC;gBAC7C,4BAAY;aACf,CAAC,CAAC,IAAI,CAAC,UAAC,MAAoB;gBACzB,iGAAiG;gBACjG,0BAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC","file":"main.js","sourcesContent":["// require all 3rd party libs\nimport 'jquery';\nimport 'bootstrap/js/bootstrap';\nimport 'admin-lte/js/app';\nimport 'hammerjs/hammer';\nimport 'jquery/jquery.hammer';\nimport 'jquery/jquery.slimscroll';\nimport 'pNotify/pnotify-adapter';\nimport 'signalr/signalr';\nimport 'leaflet/leaflet';\nimport 'fastclick/fastclick';\n\n///<reference path=\"../../../node_modules/angular2/typings/browser.d.ts\"/>\n\nimport {bootstrap} from 'angular2/platform/browser';\nimport {ComponentRef, provide, enableProdMode} from 'angular2/core';\nimport {ROUTER_PROVIDERS, LocationStrategy, HashLocationStrategy} from 'angular2/router';\nimport {BoardzApp} from './app';\nimport {HTTP_PROVIDERS} from 'angular2/http';\nimport {TokenService} from './services/token.service';\nimport {appInjector} from './services/app.injector';\nimport {LogService} from './services/log.service';\nimport 'rxjs/Rx';\n\nenableProdMode();\n\nbootstrap(BoardzApp, [\n    HTTP_PROVIDERS,\n    ROUTER_PROVIDERS,\n    provide(LocationStrategy, { useClass: HashLocationStrategy }),\n    provide(LogService, { useClass: LogService }),\n    TokenService,\n]).then((appRef: ComponentRef) => {\n    // Store a reference to the injector workaround for Dependency Injection in Router lifecycle hook\n    appInjector(appRef.injector);\n});\n"],"sourceRoot":"/source/"}