{"version":3,"sources":["services/login.service.ts"],"names":[],"mappings":"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","file":"services/login.service.js","sourcesContent":["import {Injectable} from 'angular2/core';\nimport {Http, Headers, RequestOptions} from 'angular2/http';\nimport {Router} from 'angular2/router';\nimport {Observable} from 'rxjs/Observable';\nimport {TokenService} from './token.service';\nimport {Configuration} from '../app-config';\nimport {LogService} from './log.service';\nimport {TokenData} from '../models/tokendata';\nimport {SignalRService} from './signalr.service';\n\n@Injectable()\nexport class LoginService {\n    private _lastLoginUnsuccessful: boolean;\n\n    get isAuthenticated(): boolean {\n        return this._tokenService.token !== null;\n    }\n\n    get username(): string {\n        return this._tokenService.username;\n    }\n\n    constructor(private _config: Configuration,\n                private _logService: LogService,\n                private _http: Http,\n                private _router: Router,\n                private _tokenService: TokenService,\n                private _signalRService: SignalRService) {\n        this._tokenService.check()\n            .subscribe((value) => {\n                if (!value) this.logout();\n            });\n    }\n\n    /**\n     * Logout the current user (remove token and navigate to unprotected route)\n     */\n    public logout(): void {\n        this._logService.logDebug('LoginService.logout called');\n\n        this._signalRService.stop();\n        this._lastLoginUnsuccessful = false;\n        this._tokenService.token = null;\n\n        this._router.navigate(['Login']);\n    }\n\n    /**\n     * Login the user by her username and password\n     * @param username\n     * @param password\n     * @returns {Subject<TokenData>}\n     */\n    public login(username: string, password: string): Observable<TokenData> {\n        this.logout();\n\n        let body = 'grant_type=password&username=' + username + '&password=' + password,\n            options = new RequestOptions({ headers: new Headers({ 'Content-Type': 'application/x-www-form-urlencoded' }) });\n\n        return Observable.create((observer)=> {\n            this._http.post(this._config.apiEndpoint + 'token', body, options)\n                .map(response => <TokenData>response.json())\n                .subscribe(\n                    (tokenData) => {\n                        this.saveToken(tokenData.access_token);\n                        this._tokenService.username = username;\n\n                        let expiryDate = new Date();\n                        expiryDate.setSeconds(expiryDate.getSeconds() + tokenData.expires_in);\n                        this._tokenService.tokenExpiry = expiryDate;\n                        observer.next(tokenData);\n                    },\n                    (error) => observer.error(error),\n                    () => observer.complete()\n                );\n        });\n    }\n\n    handleError(error: TokenData) {\n        this._logService.logDebug('LoginService encountered an error: ' + error);\n        this._lastLoginUnsuccessful = true;\n    }\n\n    saveToken(token: string): void {\n        this._logService.logVerbose('LoginService.saveToken: Saving token ' + token);\n        this._lastLoginUnsuccessful = false;\n        this._tokenService.token = token;\n    }\n}\n\n"],"sourceRoot":"/source/"}