{"version":3,"sources":["services/log.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;YAIA;gBAAA;oBACW,oBAAe,GAAa,mBAAQ,CAAC,IAAI,CAAC;oBAC1C,oBAAe,GAAa,mBAAQ,CAAC,OAAO,CAAC;gBAoDxD,CAAC;gBAlDU,wBAAG,GAAV,UAAW,OAAe,EAAE,QAAmB;oBAC3C,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;wBACV,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC;oBAEpC,EAAE,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC;wBAChC,MAAM,CAAC;oBAEX,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;gBACtD,CAAC;gBAEM,+BAAU,GAAjB,UAAkB,OAAe;oBAC7B,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAQ,CAAC,OAAO,CAAC,CAAC;gBACxC,CAAC;gBAEM,6BAAQ,GAAf,UAAgB,OAAe;oBAC3B,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAQ,CAAC,KAAK,CAAC,CAAC;gBACtC,CAAC;gBAEM,4BAAO,GAAd,UAAe,OAAe;oBAC1B,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAQ,CAAC,IAAI,CAAC,CAAC;gBACrC,CAAC;gBAEM,+BAAU,GAAjB,UAAkB,OAAe;oBAC7B,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAQ,CAAC,OAAO,CAAC,CAAC;gBACxC,CAAC;gBAEM,6BAAQ,GAAf,UAAgB,OAAe;oBAC3B,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAQ,CAAC,KAAK,CAAC,CAAC;gBACtC,CAAC;gBAEM,gCAAW,GAAlB,UAAmB,OAAe;oBAC9B,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAQ,CAAC,QAAQ,CAAC,CAAC;gBACzC,CAAC;gBAES,0BAAK,GAAf,UAAgB,gBAAwB;oBACpC,uBAAuB;gBAC3B,CAAC;gBAES,+BAAU,GAApB;oBACI,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;gBACpC,CAAC;gBAES,oCAAe,GAAzB,UAA0B,QAAkB;oBACxC,MAAM,CAAC,mBAAQ,CAAC,QAAQ,CAAC,CAAC;gBAC9B,CAAC;gBAES,kCAAa,GAAvB,UAAwB,QAAkB,EAAE,OAAe;oBACvD,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,KAAK,GAAG,OAAO,CAAC;oBACnF,CAAC;gBACL,CAAC;gBAtDL;oBAAC,iBAAU,EAAE;;8BAAA;gBAuDb,iBAAC;YAAD,CAtDA,AAsDC,IAAA;YAtDD,mCAsDC,CAAA","file":"services/log.service.js","sourcesContent":["import {Injectable} from 'angular2/core';\nimport {LogLevel} from '../models/loglevel';\n\n@Injectable()\nexport class LogService {\n    public defaultLogLevel: LogLevel = LogLevel.Info;\n    public maximumLogLevel: LogLevel = LogLevel.Warning;\n\n    public log(message: string, logLevel?: LogLevel): void {\n        if (!logLevel)\n            logLevel = this.defaultLogLevel;\n\n        if (logLevel > this.maximumLogLevel)\n            return;\n\n        this.doLog(this.formatMessage(logLevel, message));\n    }\n\n    public logVerbose(message: string): void {\n        this.log(message, LogLevel.Verbose);\n    }\n\n    public logDebug(message: string): void {\n        this.log(message, LogLevel.Debug);\n    }\n\n    public logInfo(message: string): void {\n        this.log(message, LogLevel.Info);\n    }\n\n    public logWarning(message: string): void {\n        this.log(message, LogLevel.Warning);\n    }\n\n    public logError(message: string): void {\n        this.log(message, LogLevel.Error);\n    }\n\n    public logCritical(message: string): void {\n        this.log(message, LogLevel.Critical);\n    }\n\n    protected doLog(formattedMessage: string): void {\n        // here to be overriden\n    }\n\n    protected getIsoDate(): string {\n        return new Date().toISOString();\n    }\n\n    protected getLogLevelName(logLevel: LogLevel): string {\n        return LogLevel[logLevel];\n    }\n\n    protected formatMessage(logLevel: LogLevel, message: string): string {\n        return this.getIsoDate() + ' [' + this.getLogLevelName(logLevel) + ']: ' + message;\n        ;\n    }\n}"],"sourceRoot":"/source/"}