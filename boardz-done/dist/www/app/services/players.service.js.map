{"version":3,"sources":["services/players.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YASA;gBACI,wBAAoB,KAAwB;oBAAxB,UAAK,GAAL,KAAK,CAAmB;gBAC5C,CAAC;gBAEO,0CAAiB,GAAzB;oBACI,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;oBAC7C,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;oBACvC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;oBAChC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,gCAAgC,CAAC,CAAC;oBAEjE,MAAM,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;gBAChC,CAAC;gBAEM,+BAAM,GAAb;oBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAW,QAAQ,CAAC,IAAI,EAAE,CAAC,EAA3B,CAA2B,CAAC,CAAC;gBAC3F,CAAC;gBAEM,gCAAO,GAAd,UAAe,EAAU;oBACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,2BAAyB,EAAI,CAAC,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAQ,QAAQ,CAAC,IAAI,EAAE,EAAvB,CAAuB,CAAC,CAAC;gBAClG,CAAC;gBAEM,uCAAc,GAArB;oBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAQ,CAAC,CAAC,IAAI,EAAE,EAAhB,CAAgB,CAAC,CAAA;gBAC/E,CAAC;gBAEM,mCAAU,GAAjB,UAAkB,MAAc,EAAE,WAAwB;oBACtD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,mCAAiC,MAAM,6BAAwB,WAAW,CAAC,QAAQ,8BAAyB,WAAW,CAAC,SAAW,CAAC;yBACrJ,GAAG,CAAC,UAAA,CAAC;wBACF,MAAM,CAAiB,CAAC,CAAC,IAAI,EAAE,CAAC;oBACpC,CAAC,CAAC,CAAC;gBACX,CAAC;gBAEM,4BAAG,GAAV,UAAW,MAAc;oBACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC;yBACtF,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAQ,QAAQ,CAAC,IAAI,EAAE,EAAvB,CAAuB,CAAC,CAAC;gBAClD,CAAC;gBAEM,+BAAM,GAAb,UAAc,MAAW;oBACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC;yBACxF,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,MAAM,CAAC,EAAE,EAAT,CAAS,CAAC,CAAC;gBACpC,CAAC;gBAEM,+BAAM,GAAb,UAAc,EAAU;oBACpB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,2BAAyB,EAAI,CAAC;yBAClD,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAQ,QAAQ,CAAC,IAAI,EAAE,EAAvB,CAAuB,CAAC,CAAC;gBAClD,CAAC;gBA/CL;oBAAC,iBAAU,EAAE;;kCAAA;gBAgDb,qBAAC;YAAD,CA/CA,AA+CC,IAAA;YA/CD,2CA+CC,CAAA","file":"services/players.service.js","sourcesContent":["import {Injectable} from 'angular2/core';\nimport {GeoLocation} from '../models/geolocation';\nimport {AuthenticatedHttp} from './authenticated.http';\nimport {Headers} from 'angular2/http';\nimport {Player} from '../models/player';\nimport {Observable} from 'rxjs/Observable';\nimport {NearByPlayer} from '../models/nearbyplayer';\n\n@Injectable()\nexport class PlayersService {\n    constructor(private _http: AuthenticatedHttp) {\n    }\n\n    private getRequestOptions() {\n        let headers = new Headers();\n        headers.append('Accept', 'application/json');\n        headers.append('Accept', 'text/plain');\n        headers.append('Accept', '*/*');\n        headers.append('Content-Type', 'application/json;charset=UTF-8');\n\n        return { headers: headers };\n    }\n\n    public getAll(): Observable<Player[]> {\n        return this._http.get('api/players/list').map(response => (<Player[]>response.json()));\n    }\n\n    public getById(id: string): Observable<Player> {\n        return this._http.get(`api/players/single?id=${id}`).map(response => <Player>response.json());\n    }\n\n    public getPlayerCount(): Observable<number> {\n        return this._http.get('api/players/playercount').map(r => <number>r.json())\n    }\n\n    public findNearby(radius: number, coordinates: GeoLocation): Observable<NearByPlayer[]> {\n        return this._http.get(`api/players/FindNearby?radius=${radius}&coordinate.latitude=${coordinates.latitude}&coordinate.longitude=${coordinates.longitude}`)\n            .map(r => {\n                return <NearByPlayer[]>r.json();\n            });\n    }\n\n    public add(player: Player): Observable<string> {\n        return this._http.post(`api/players/add`, JSON.stringify(player), this.getRequestOptions())\n            .map(response => <string>response.json());\n    }\n\n    public update(player: any): Observable<string> {\n        return this._http.put(`api/players/update`, JSON.stringify(player), this.getRequestOptions())\n            .map(response => player.id);\n    }\n\n    public delete(id: string): Observable<string> {\n        return this._http.delete(`api/players/remove?id=${id}`)\n            .map(response => <string>response.text());\n    }\n}"],"sourceRoot":"/source/"}