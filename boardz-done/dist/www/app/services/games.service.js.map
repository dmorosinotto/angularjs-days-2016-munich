{"version":3,"sources":["services/games.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAOA;gBACI,sBAAoB,KAAwB;oBAAxB,UAAK,GAAL,KAAK,CAAmB;gBAC5C,CAAC;gBAEO,wCAAiB,GAAzB;oBACI,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;oBAC7C,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;oBACvC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;oBAChC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,gCAAgC,CAAC,CAAC;oBAEjE,MAAM,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;gBAChC,CAAC;gBAEM,6BAAM,GAAb;oBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAS,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAzB,CAAyB,CAAC,CAAC;gBAC5F,CAAC;gBAEM,gCAAS,GAAhB,UAAiB,IAAU;oBACvB,MAAM,CAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;gBAClD,CAAC;gBAEM,mCAAY,GAAnB;oBACI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,MAAM,EAAZ,CAAY,CAAC,CAAC;gBACpD,CAAC;gBAEM,8BAAO,GAAd,UAAe,EAAU;oBACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,8BAA4B,EAAI,CAAC;yBAClD,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAM,QAAQ,CAAC,IAAI,EAAE,EAArB,CAAqB,CAAC,CAAC;gBAChD,CAAC;gBAEM,8BAAO,GAAd,UAAe,IAAU;oBACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC;yBACvF,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAQ,QAAQ,CAAC,IAAI,EAAE,EAAvB,CAAuB,CAAC,CAAC;gBAClD,CAAC;gBAEM,iCAAU,GAAjB,UAAkB,IAAU;oBACxB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC;yBACzF,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,IAAI,CAAC,EAAE,EAAP,CAAO,CAAC,CAAC;gBAClC,CAAC;gBAEM,iCAAU,GAAjB,UAAkB,EAAU;oBACxB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,8BAA4B,EAAI,CAAC;yBACrD,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAQ,QAAQ,CAAC,IAAI,EAAE,EAAvB,CAAuB,CAAC,CAAC;gBAClD,CAAC;gBA7CL;oBAAC,iBAAU,EAAE;;gCAAA;gBA8Cb,mBAAC;YAAD,CA7CA,AA6CC,IAAA;YA7CD,uCA6CC,CAAA","file":"services/games.service.js","sourcesContent":["import {Injectable} from 'angular2/core';\nimport {Headers} from 'angular2/http';\nimport {Observable} from 'rxjs/Observable';\nimport {AuthenticatedHttp} from './authenticated.http';\nimport {Game} from '../models/game';\n\n@Injectable()\nexport class GamesService {\n    constructor(private _http: AuthenticatedHttp) {\n    }\n\n    private getRequestOptions() {\n        let headers = new Headers();\n        headers.append('Accept', 'application/json');\n        headers.append('Accept', 'text/plain');\n        headers.append('Accept', '*/*');\n        headers.append('Content-Type', 'application/json;charset=UTF-8');\n\n        return { headers: headers };\n    }\n\n    public getAll(): Observable<Game[]> {\n        return this._http.get('api/boardgames/list').map(response => (<Game[]>response.json()));\n    }\n\n    public deepClone(game: Game): Game {\n        return <Game>JSON.parse(JSON.stringify(game));\n    }\n\n    public getGameCount(): Observable<number> {\n        return this.getAll().map(games => games.length);\n    }\n\n    public getById(id: string): Observable<Game> {\n        return this._http.get(`api/boardgames/single?id=${id}`)\n            .map(response => <Game>response.json());\n    }\n\n    public addGame(game: Game): Observable<string> {\n        return this._http.post(`api/boardgames/add`, JSON.stringify(game), this.getRequestOptions())\n            .map(response => <string>response.json());\n    }\n\n    public updateGame(game: Game): Observable<string> {\n        return this._http.put(`api/boardgames/update`, JSON.stringify(game), this.getRequestOptions())\n            .map(response => game.id);\n    }\n\n    public deleteGame(id: string): Observable<string> {\n        return this._http.delete(`api/boardgames/remove?id=${id}`)\n            .map(response => <string>response.text());\n    }\n}"],"sourceRoot":"/source/"}