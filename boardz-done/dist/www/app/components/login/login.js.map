{"version":3,"sources":["components/login/login.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAUA;gBAMI,mBAAoB,OAAe,EACf,aAA2B,EAC3B,WAAuB,EACvB,oBAAyC,EACzC,eAA+B;oBAJ/B,YAAO,GAAP,OAAO,CAAQ;oBACf,kBAAa,GAAb,aAAa,CAAc;oBAC3B,gBAAW,GAAX,WAAW,CAAY;oBACvB,yBAAoB,GAApB,oBAAoB,CAAqB;oBACzC,oBAAe,GAAf,eAAe,CAAgB;oBAN5C,cAAS,GAAY,KAAK,CAAC;gBAOlC,CAAC;gBAEM,2BAAO,GAAd;oBAAA,iBAeC;oBAdG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,0BAA0B,CAAC,CAAC;oBAEtD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC;yBACnD,SAAS,CACN;wBACI,KAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;wBAC7B,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBACrB,KAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,CAAA;oBACxC,CAAC,EACD;wBACI,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBACpB,KAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,yBAAyB,CAAC,CAAC;oBACrE,CAAC,CACJ,CAAC;gBACV,CAAC;gBAED,4BAAQ,GAAR,UAAS,KAAc;oBACnB,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,8CAA8C,GAAG,KAAK,CAAC,CAAC;oBAClF,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBAC3B,CAAC;gBApCL;oBAAC,gBAAS,CAAC;wBACP,WAAW,EAAE,iCAAiC;qBACjD,CAAC;;6BAAA;gBAmCF,gBAAC;YAAD,CAlCA,AAkCC,IAAA;YAlCD,iCAkCC,CAAA","file":"components/login/login.js","sourcesContent":["import {Component} from 'angular2/core';\nimport {Router} from 'angular2/router';\nimport {LoginService} from '../../services/login.service';\nimport {LogService} from '../../services/log.service';\nimport {NotificationService} from '../../services/notification.service';\nimport {SignalRService} from '../../services/signalr.service';\n\n@Component({\n    templateUrl: 'app/components/login/login.html'\n})\nexport class LoginForm {\n    private _userName: string;\n    private _password: string;\n\n    public _hasError: boolean = false;\n    \n    constructor(private _router: Router,\n                private _loginService: LoginService,\n                private _logService: LogService,\n                private _notificationService: NotificationService,\n                private _signalRService: SignalRService) {\n    }\n\n    public doLogin(): void {\n        this._logService.logDebug('LoginForm.doLogin called');\n        \n        this._loginService.login(this._userName, this._password)\n            .subscribe(\n                () => {\n                    this._signalRService.start();\n                    this.setError(false);\n                    this._router.navigate(['Dashboard'])\n                },\n                () => {\n                    this.setError(true);\n                    this._notificationService.notifyError('Login was unsuccessful.');\n                }\n            );\n    }\n\n    setError(value: boolean) {\n        this._logService.logDebug('LoginForm.setError: Setting error state to: ' + value);\n        this._hasError = value;\n    }\n}\n"],"sourceRoot":"/source/"}